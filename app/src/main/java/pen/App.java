/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pen;

import pen.tools.demo.DemoTool;
import pen.tools.draw.DrawTool;
import pen.tools.view.ViewTool;

import java.io.File;
import java.nio.file.Files;
import java.util.*;

public class App {
    //-------------------------------------------------------------------------
    // Instance variables

    public final static Map<String, Tool> TOOLS = new TreeMap<>();

    static {
        TOOLS.putAll(Map.of(
            "demo",   new DemoTool(),
            "draw",  new DrawTool(),
            "view", new ViewTool()
        ));
    }

    //-------------------------------------------------------------------------
    // Launcher App

    /**
     * Gets the desired tool and executes it
     * @param args The arguments from the command line.
     */
    public void app(String[] args) {
        var argq = new ArrayDeque<>(List.of(args));

        if (argq.isEmpty()) {
            println("Usage: pen <tool> [<arguments...>]");
            println("");
            println("Run \"pen help\" for a list of tools.");
            System.exit(1);
        }

        var subcommand = argq.poll();

        var tool = TOOLS.get(subcommand);

        if (tool != null) {
            tool.start(args);
        } else if (subcommand.equals("help")) {
            showHelp(argq);
        } else {
            showFailure(subcommand);
        }
    }

    private void showFailure(String subcommand) {
        println("Error, unrecognized tool: \"" + subcommand + "\"");
        println("");
        println("Run \"pen help\" for a list of subcommands.");
    }

    private void showHelp(Deque<String> argq) {
        if (argq.isEmpty()) {
            System.out.println("Pen supports the following tools:\n");

            for (var subcommand : TOOLS.keySet()) {
                var tool = TOOLS.get(subcommand);

                System.out.printf("%-8s %s\n", subcommand, tool.oneLiner());
            }

            System.out.println("\nEnter \"pen help <tool>\" for help on a tool.");
        } else {
            var subcommand = argq.poll();
            var tool = TOOLS.get(subcommand);

            if (tool != null) {
                System.out.println("Usage: pen " + tool.usage());
                System.out.println();
                System.out.println(tool.help());
            } else {
                showFailure(subcommand);
            }
        }
    }

    //-------------------------------------------------------------------------
    // Helpers

    public void println(String text) {
        System.out.println(text);
    }

    //-------------------------------------------------------------------------
    // Main
    public static void main(String[] args) {
        try {
            new App().app(args);
        } catch (AppError ex) {
            System.out.println("Error: " + ex.getMessage());
//            ex.printStackTrace(System.out);
        } catch (Exception ex) {
            System.out.println("Unexpected Exception Thrown: " + ex.getMessage());
            ex.printStackTrace(System.out);
        }
    }
}
